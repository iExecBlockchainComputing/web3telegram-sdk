# sdk @iexec/web3telegram publish npm nightly pipeline
kind: pipeline
type: docker
name: sdk-publish-nightly

trigger:
  event:
    - promote
  target:
    - sdk-nightly
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types
    depends_on:
      - install

  - name: build
    image: node:18.19
    commands:
      - npm run build
    depends_on:
      - install

  - name: set-version-nightly
    image: node:18.19
    commands:
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"
    depends_on:
      - build

  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
    depends_on:
      - format
      - lint
      - check-types
      - build

  - name: publish-nightly
    image: plugins/npm
    pull: always
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: nightly
      access: public
    depends_on:
      - format
      - lint
      - check-types
      - build
      - set-version-nightly
    when:
      branch:
        - main

---
# sdk @iexec/web3telegram publish npm latest pipeline
kind: pipeline
type: docker
name: sdk-publish-latest

trigger:
  event:
    - promote
  target:
    - sdk-latest
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types
    depends_on:
      - install

  - name: build
    image: node:18.19
    commands:
      - npm run build
    depends_on:
      - install

  - name: publish
    image: plugins/npm
    pull: always
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: latest
      access: public
    depends_on:
      - format
      - lint
      - check-types
      - build

---
# dapp web3telegram-dapp publish docker dev non-tee pipeline
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: dapp-dev-non-tee

trigger:
  event:
    - promote
  target:
    - dapp-dev-non-tee
  branch:
    - main

steps:
  - name: install
    image: node:20-alpine3.22
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:20-alpine3.22
    commands:
      - cd dapp
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd dapp
      - npm run lint

  - name: test
    image: node:20-alpine3.22
    environment:
      TELEGRAM_BOT_TOKEN:
        from_secret: telegram-bot-token-dev
    commands:
      - cd dapp
      - npm run ctest

  - name: docker-publish-dev-non-tee
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/web3telegram-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - dev
        - 'dev-${DRONE_COMMIT}'

---
# dapp web3telegram-dapp publish docker prod non-tee pipeline
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: dapp-prod-non-tee

trigger:
  event:
    - promote
  target:
    - dapp-prod-non-tee
  branch:
    - main

steps:
  - name: install
    image: node:20-alpine3.22
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:20-alpine3.22
    commands:
      - cd dapp
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd dapp
      - npm run lint

  - name: test
    image: node:20-alpine3.22
    environment:
      TELEGRAM_BOT_TOKEN:
        from_secret: telegram-bot-token-prod
    commands:
      - cd dapp
      - npm run ctest

  - name: extract-version-from-package
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - cd dapp
      - npm pkg get version | sed 's/"//g' > ../.tags

  - name: docker-publish-prod-non-tee
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      # tag comes from .tags file
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/web3telegram-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password

---
# pipeline to publish sell order
kind: pipeline
type: docker
name: publish-apporder

trigger:
  event:
    - promote
  target:
    - dapp-publish-sell-order-dev
    - dapp-publish-sell-order-prod
  branch:
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: publish sell order
    image: node:18.19
    pull: always
    params:
      - PRICE
      - VOLUME
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3telegram-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run publish-sell-order

---
# pipeline to revoke sell order
kind: pipeline
type: docker
name: revoke-apporder

trigger:
  event:
    - promote
  target:
    - dapp-revoke-sell-order-dev
    - dapp-revoke-sell-order-prod
  branch:
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: revoke sell order
    image: node:18.19
    pull: always
    params:
      - ORDER_HASH
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3telegram-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run revoke-sell-order

---
# pipeline to push app secret
kind: pipeline
type: docker
name: push-app-secret
trigger:
  event:
    - promote
  target:
    - dapp-push-secret-dev
    - dapp-push-secret-prod
  branch:
    - main
steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: push dapp secret dev
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3telegram-dapp-owner-prod-privatekey
      TELEGRAM_BOT_TOKEN:
        from_secret: telegram-bot-token-dev
    when:
      target:
        - dapp-push-secret-dev

  - name: push dapp secret prod
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3telegram-dapp-owner-prod-privatekey
      TELEGRAM_BOT_TOKEN:
        from_secret: telegram-bot-token-prod
    when:
      target:
        - dapp-push-secret-prod
    commands:
      - cd deployment-dapp
      - npm run push-dapp-secret
---
# pipeline to add ressource to whitelist smart contract
kind: pipeline
type: docker
name: add-ressource-to-whitelist

trigger:
  event:
    - promote
  target:
    - add-resource-to-whitelist-dev
    - add-resource-to-whitelist-prod
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node

  - name: add resource to whitelist dev
    image: node:18.12.1
    params:
      - ADDRESS_TO_ADD
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey # dev whitelist smart contract deployer
      CONTRACT_ADDRESS:
        from_secret: web3telegram-whitelist-dev-address #Â whitelist address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run addResourceToWhitelist
    when:
      target:
        - add-resource-to-whitelist-dev

  - name: add resource to whitelist prod
    image: node:18.12.1
    params:
      - ADDRESS_TO_ADD
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-prod-privatekey # prod whitelist smart contract deployer
      CONTRACT_ADDRESS:
        from_secret: web3telegram-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run addResourceToWhitelist
    when:
      target:
        - add-resource-to-whitelist-prod
      branch:
        - main
---
# pipeline to remove ressource from whitelist smart contract
kind: pipeline
type: docker
name: remove-resource-from-whitelist

trigger:
  event:
    - promote
  target:
    - remove-resource-from-whitelist-dev
    - remove-resource-from-whitelist-prod
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node

  - name: remove ressource from whitelist dev
    image: node:18.12.1
    params:
      - ADDRESS_TO_REMOVE
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3telegram-whitelist-dev-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run removeResourceFromWhitelist
    when:
      target:
        - remove-resource-from-whitelist-dev

  - name: remove resource from whitelist prod
    image: node:18.12.1
    params:
      - ADDRESS_TO_REMOVE
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3telegram-dapp-owner-prod-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3telegram-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run removeResourceFromWhitelist
    when:
      target:
        - remove-resource-from-whitelist-prod
      branch:
        - main
---
# pipeline to transfer ownership of whitelist smart contract
kind: pipeline
type: docker
name: transfer-ownership-whitelist-smart-contract

trigger:
  event:
    - promote
  target:
    - transfer-ownership-whitelist-smart-contract-dev
    - transfer-ownership-whitelist-smart-contract-prod
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
      - cd node_modules/whitelist-smart-contract
      - npm install --save-dev ts-node

  - name: transfer ownsership dev
    image: node:18.12.1
    params:
      - NEW_OWNER_ADDRESS
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3telegram-whitelist-dev-address
    commands:
      - cd node_modules/whitelist-contract
      - npm run transferOwnership
    when:
      target:
        - transfer-ownership-whitelist-smart-contract-dev
      branch:
        - main

  - name: transfer ownsership prod
    image: node:18.12.1
    params:
      - NEW_OWNER_ADDRESS
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: web3telegram-dapp-owner-prod-privatekey
      CONTRACT_ADDRESS:
        from_secret: web3telegram-whitelist-prod-address
    commands:
      - cd node_modules/whitelist-smart-contract
      - npm run transferOwnership
    when:
      target:
        - transfer-ownership-whitelist-smart-contract-prod
      branch:
        - main
---
kind: pipeline
type: docker
name: deprecate-version

trigger:
  event:
    - promote
  target:
    - npm-deprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: deprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/web3telegram@$PACKAGE_VERSION "deprecate $PACKAGE_VERSION"; else echo "PACKAGE_VERSION is not set"; fi
---
kind: pipeline
type: docker
name: undeprecate version

trigger:
  event:
    - promote
  target:
    - npm-undeprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: undeprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/web3telegram@$PACKAGE_VERSION ""; else echo "PACKAGE_VERSION is not set"; fi
---
# pipeline to configure ens
kind: pipeline
type: docker
name: configure ens

trigger:
  event:
    - promote
  target:
    - configure-ens-dev
    - configure-ens-prod
  branch:
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: configure ens
    image: node:18.19
    pull: always
    params:
      - ENS_NAME
      - DEPLOYED_APP_ADDRESS
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: web3telegram-dapp-owner-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: web3telegram-dapp-owner-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run configure-ens
